{"version":3,"sources":["components/Demo/services.js","../../src/useInfiniteScroll.tsx","components/Demo/Loader.jsx","components/Demo/index.jsx","App.tsx","index.tsx"],"names":["getServerImages","page","limit","a","axios","method","url","headers","params","response","data","DIRECTIONS","callback","hasMore","startPage","offset","direction","BOTTOM","ref","useRef","containerRef","useState","isLoading","setIsLoading","setPage","intersectionRef","setRef","useCallback","setContainerRef","useEffect","fetchData","func","useLayoutEffect","currentRef","observer","IntersectionObserver","entries","isIntersecting","prev","root","rootMargin","console","behavior","block","inline","Loader","React","forwardRef","props","className","children","Demo","images","setImages","useInfiniteScroll","Promise","resolve","res","map","image","idx","key","id","src","alt","color","size","thickness","App","ReactDOM","render","document","getElementById"],"mappings":"wWAEaA,EAAe,uCAAG,WAAOC,EAAMC,GAAb,eAAAC,EAAA,sEACNC,IAAM,CAC3BC,OAAQ,MACRC,IAAK,6CACLC,QAAS,CACP,YAAa,wCAEfC,OAAQ,CACNN,QACAD,UATyB,cACvBQ,EADuB,yBAatBA,EAASC,MAba,2CAAH,wDCctBC,EAAa,SAAbA,EAEC,M,EAG0B,SAAC,G,IAChCC,aACAC,Y,IACAC,qBAAYA,EAAA,I,IACZC,kBAASA,EAAA,M,IACTC,qBAAYA,EAAAL,EAAWM,EAEjBC,EAAMC,iBAAZ,MACMC,EAAeD,iBAArB,M,EACkCE,oBAAQ,GAAnCC,OAAWC,O,EACMF,mBAAQ,GAAzBpB,OAAMuB,OAEPC,EAAkBN,iBAAxB,GACMO,EAASC,uBAAY,YACzB,IACET,eAFJ,IAMMU,EAAkBD,uBAAY,YAClC,IACEP,eAFJ,IAgEA,OApDAS,qBAAU,YACK,WAAH,I,gBAPM,SAAH,O,OACbN,M,gBACMX,EAASX,IAAD,iBACdsB,SAHa,mCAQLO,CAAU7B,IAAD,iBACXe,IAAcL,GAAgBS,2BAF1B,mCAIVW,KACC,CANHF,IAQAG,2BAAgB,WACd,IAAMC,EAAaf,EAAnB,QAqBMgB,EAAW,IAAIC,sBAXJ,SAAH,O,OACZC,WAAgB,YACd,GADiBC,mBACjB,EAAkC,CAGhC,GAFAZ,UAA0BA,UAA1BA,EAEA,IAAIA,UAA+B,OACnCD,GAAQ,mBAAkBc,EAAlB,S,kBANA,qCARE,CACdC,KADc,KAEdC,WACExB,IAAcL,EAAdK,sBAEOD,EAFPC,mBAoBJ,OAFAkB,aAEO,WACLA,kBAED,CAAChB,EAAKL,EA7BTmB,IA+BAA,2BAAgB,WACdS,eACIzB,IAAcL,GAEhBS,yBAAoC,CAClCsB,SADkC,SAElCC,MAFkC,MAGlCC,OAAQ,cAIX,CAXHZ,IAaO,CAACN,EAAQE,EAAhB,I,iBC9FaiB,EARAC,IAAMC,YAAW,SAACC,EAAO9B,GACtC,OACE,yBAAKA,IAAKA,EAAK+B,UAAU,UACtBD,EAAME,aC4CEC,G,MA1CF,WAAO,IAAD,EACW9B,mBAAS,MADpB,mBACV+B,EADU,KACFC,EADE,OAWsBC,EAAkB,CACvDzC,SAAS,EACTE,OAAQ,IACRC,UAAW,SACXJ,SAZgB,SAACX,GAAD,OAAU,IAAIsD,QAAJ,uCAAY,WAAOC,GAAP,eAAArD,EAAA,sEACpBH,EAAgBC,EAAM,IADF,OAChCwD,EADgC,OAEtCJ,GAAU,SAAAf,GAAI,OAAKA,EAAI,sBAAOA,GAAP,YAAgBmB,IAAOA,KAE9CD,EAAQC,GAJ8B,2CAAZ,0DAHX,mBAWVvC,EAXU,KAWLE,EAXK,KAWSE,EAXT,KAmBjB,OACE,yBAAKJ,IAAKE,GACR,yBAAK6B,UAAU,WACZG,GACCA,EAAOM,KAAI,SAACC,EAAOC,GAAR,OACT,4BACEC,IAAKF,EAAMG,GACXb,UAAS,uCAAkCW,EAAM,IAEjD,yBACEG,IAAKJ,EAAMrD,IACX2C,UAAU,eACXe,IAAI,eAIb,kBAAC,EAAD,CAAQ9C,IAAKA,GACVI,GAAa,kBAAC,IAAD,CAAS2C,MAAM,YAAYC,KAAK,OAAOC,UAAW,QClCzDC,G,MAJH,WACV,OAAO,kBAAC,EAAD,QCATC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.747219ed.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const getServerImages = async (page, limit) => {\r\n  const response = await axios({\r\n    method: 'GET',\r\n    url: 'https://api.thecatapi.com/v1/images/search',\r\n    headers: {\r\n      'x-api-key': '3cdc845e-5d4c-44aa-a433-e5938a053106'\r\n    },\r\n    params: {\r\n      limit,\r\n      page\r\n    }\r\n  });\r\n  \r\n  return response.data;\r\n};\r\n","import {\n  useState,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useCallback\n} from 'react'\n\ninterface Props {\n  callback: (page: number) => void\n  hasMore: boolean\n  startPage: number\n  direction: string\n  offset: number\n}\n\nconst DIRECTIONS = {\n  BOTTOM: 'bottom',\n  TOP: 'top'\n}\n\nexport const useInfiniteScroll = ({\n  callback,\n  hasMore,\n  startPage = 1,\n  offset = 250,\n  direction = DIRECTIONS.BOTTOM\n}: Props) => {\n  const ref = useRef<any>(null)\n  const containerRef = useRef<any>(null)\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [page, setPage] = useState<any>(startPage)\n\n  const intersectionRef = useRef<any>(0)\n  const setRef = useCallback((node: any) => {\n    if (node) {\n      ref.current = node\n    }\n  }, [])\n\n  const setContainerRef = useCallback((node: any) => {\n    if (node) {\n      containerRef.current = node\n    }\n  }, [])\n\n  const fetchData = async (page: number) => {\n    setIsLoading(true)\n    await callback(page)\n    setIsLoading(false)\n  }\n\n  useEffect(() => {\n    const func = async () => {\n      await fetchData(page)\n      if (direction === DIRECTIONS.TOP) containerRef.current.scrollTo(0, offset)\n    }\n    func()\n  }, [page])\n\n  useLayoutEffect(() => {\n    const currentRef = ref.current\n\n    const options = {\n      root: null,\n      rootMargin:\n        direction === DIRECTIONS.BOTTOM\n          ? `0px 0px ${offset}px 0px`\n          : `${offset}px 0px 0px 0px`\n    }\n\n    const loadMore = async (entries: any) => {\n      entries.forEach(({ isIntersecting }: any) => {\n        if (isIntersecting && !isLoading) {\n          intersectionRef.current = intersectionRef.current + 1\n\n          if (intersectionRef.current === 1) return\n          setPage((prev: number) => prev + 1)\n        }\n      })\n    }\n\n    const observer = new IntersectionObserver(loadMore, options)\n\n    observer.observe(currentRef)\n\n    return () => {\n      observer.disconnect()\n    }\n  }, [ref, hasMore, isLoading])\n\n  useLayoutEffect(() => {\n    console.log(containerRef)\n    if (direction === DIRECTIONS.TOP) {\n      // window.scrollTo({ block: 'end', behavior: 'smooth' })\n      containerRef.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'end',\n        inline: 'nearest'\n      })\n      // containerRef.current.scrollTo(0, containerRef.current.scrollHeight)\n    }\n  }, [containerRef])\n\n  return [setRef, setContainerRef, isLoading]\n}\n","import React from 'react';\r\n\r\nconst Loader = React.forwardRef((props, ref) => {\r\n  return (\r\n    <div ref={ref} className=\"loader\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Loader;\r\n","import React, { useState } from 'react';\nimport { getServerImages } from './services';\nimport useInfiniteScroll from 'react-use-infinite-scroll';\nimport Spinner from 'react-svg-spinner';\nimport Loader from './Loader';\nimport './styles.css';\n\nconst Demo = () => {\n  const [images, setImages] = useState(null);\n  \n  const getImages = (page) => new Promise(async (resolve) => {\n    const res = await getServerImages(page, 20);\n    setImages(prev => (prev ? [...prev, ...res] : res));\n  \n    resolve(res);\n  });\n  \n\n  const [ref, containerRef, isLoading] = useInfiniteScroll({\n    hasMore: true,\n    offset: 250,\n    direction: 'bottom',\n    callback: getImages,\n  });\n  \n\n  return (\n    <div ref={containerRef}>\n      <div className=\"gallery\">\n        {images &&\n          images.map((image, idx) => (\n            <figure\n              key={image.id}\n              className={`gallery__item gallery__item--${idx + 1}`}\n            >\n              <img\n                src={image.url}\n                className=\"gallery__img\"\n               alt=\"Image\"/>\n            </figure>\n          ))}\n      </div>\n      <Loader ref={ref}>\n        {isLoading && <Spinner color=\"goldenrod\" size=\"64px\" thickness={2} />}\n      </Loader>\n    </div>\n  );\n};\n\nexport default Demo;\n","import React from 'react'\n\nimport Demo from './components/Demo';\nimport 'react-use-infinite-scroll/dist/index.css'\n\nconst App = () => {\n  return <Demo/>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}