{"version":3,"sources":["components/Demo/services.js","../../src/useInfiniteScroll.tsx","components/Demo/Loader.jsx","components/Demo/Child.jsx","components/Demo/index.jsx","App.tsx","index.tsx"],"names":["getPokemons","page","limit","a","axios","method","url","headers","params","offset","response","next","data","results","DIRECTIONS","callback","hasMore","startPage","direction","BOTTOM","ref","useRef","useState","firstScroll","setFirstScroll","containerRef","isLoading","setIsLoading","setPage","setRef","useCallback","setContainerRef","useEffect","fetchData","func","useLayoutEffect","currentRef","observer","IntersectionObserver","entries","isIntersecting","prev","root","rootMargin","block","inline","window","Loader","React","forwardRef","props","className","children","Child","name","key","src","alt","Demo","pokemons","setPokemons","hasNextPage","setNextPage","useInfiniteScroll","Promise","resolve","map","pokemon","idx","color","size","thickness","App","ReactDOM","render","document","getElementById"],"mappings":"wWAEaA,EAAW,uCAAG,WAAOC,EAAMC,GAAb,eAAAC,EAAA,sEACFC,IAAM,CAC3BC,OAAQ,MACRC,IAAK,qCACLC,QAAS,CACP,OAAU,mBACV,8BAA+B,KAEjCC,OAAQ,CACNN,QACAO,OAAiB,IAATR,EAAa,EAAIA,EAAOC,KAVX,cACnBQ,EADmB,yBAclB,CACLC,KAAMD,EAASE,KAAKD,KACpBE,QAASH,EAASE,KAAKC,UAhBA,2CAAH,wDCclBC,EAAa,SAAbA,EAEC,M,EAG0B,SAAC,G,IAChCC,aACAC,Y,IACAC,qBAAYA,EAAA,I,IACZR,kBAASA,EAAA,M,IACTS,qBAAYA,EAAAJ,EAAWK,EAEjBC,EAAMC,iBAAZ,M,EACsCC,oBAAQ,GAAvCC,OAAaC,OACdC,EAAeJ,iBAArB,M,EACkCC,oBAAQ,GAAnCI,OAAWC,O,EACML,mBAAQ,GAAzBrB,OAAM2B,OAEPC,EAASC,uBAAY,YACzB,IACEV,eAFJ,IAMMW,EAAkBD,uBAAY,YAClC,IACEL,eAFJ,IAiEA,OArDAO,qBAAU,YACK,WAAH,I,gBAPM,SAAH,O,OACbL,M,gBACMZ,EAASd,IAAD,iBACd0B,SAHa,mCAQLM,CAAUhC,IAAD,iBACXiB,IAAcJ,GAAgBW,2BAF1B,mCAIVS,KACC,CANHF,IAQAG,2BAAgB,WACd,MAEA,IAAMC,EAAahB,EAAnB,QAkBMiB,EAAW,IAAIC,sBARJ,SAAH,O,OACZC,WAAgB,YAAGC,mBACjB,GACEZ,GAAQ,mBAAkBa,EAAlB,Q,kBAHA,qCARE,CACdC,KADc,KAEdC,WACEzB,IAAcJ,EAAdI,sBAEOT,EAFPS,mBAiBJ,OAFAmB,aAEO,WACLA,mBAED,CAACjB,EAAKJ,EA5BTmB,IA8BAA,2BAAgB,WACVjB,IAAcJ,GAAlB,GACEW,yBAAoC,CAClCmB,MADkC,MAElCC,OAAQ,eAKdb,qBAAU,WAER,OADAc,kCAAkC,kBAAMtB,GAAN,MAC3B,kBACLsB,OAAA,8BAAqC,kBAAMtB,GAAN,SAHzCQ,IAMO,CAACH,EAAQE,EAAhB,I,iBC/FagB,EARAC,IAAMC,YAAW,SAACC,EAAO9B,GACtC,OACE,yBAAKA,IAAKA,EAAK+B,UAAU,UACtBD,EAAME,aCSEC,EAZD,SAAC,GAAD,IAAG/C,EAAH,EAAGA,IAAKgD,EAAR,EAAQA,KAAR,OACZ,4BACEC,IAAKD,EACLH,UAAS,uCAAkCG,IAE3C,yBACEE,IAAKlD,EACL6C,UAAU,eACVM,IAAI,YC8BKC,G,MAhCF,WAAO,IAAD,EACepC,mBAAS,MADxB,mBACVqC,EADU,KACAC,EADA,OAEkBtC,mBAAS,MAF3B,mBAEVuC,EAFU,KAEGC,EAFH,OAYsBC,EAAkB,CACvD/C,QAAS6C,EACTpD,OAAQ,IACRS,UAAW,SACXH,SAZgB,SAACd,GAAD,OAAU,IAAI+D,QAAJ,uCAAY,WAAOC,GAAP,mBAAA9D,EAAA,sEACNH,EAAYC,EAAM,KADZ,gBAC9BY,EAD8B,EAC9BA,QAASF,EADqB,EACrBA,KACjBiD,GAAY,SAAAnB,GAAI,OAAKA,EAAI,sBAAOA,GAAP,YAAgB5B,IAAWA,KACpDiD,IAAcnD,GACdsD,EAAQpD,GAJ8B,2CAAZ,0DAJX,mBAYVO,EAZU,KAYLK,EAZK,KAYSC,EAZT,KAmBjB,OACE,yBAAKN,IAAKK,GACR,wBAAI0B,UAAU,WACXQ,GACDA,EAASO,KAAI,SAACC,EAASC,GAAV,OACT,kBAAC,EAAD,iBAAWD,EAAX,CAAoBZ,IAAKa,SAG/B,kBAAC,EAAD,CAAQhD,IAAKA,GAAOM,GAAa,kBAAC,IAAD,CAAS2C,MAAM,YAAYC,KAAK,OAAOC,UAAW,QC1B1EC,G,MAJH,WACV,OAAO,kBAAC,EAAD,QCATC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.0ac44f74.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const getPokemons = async (page, limit) => {\n  const response = await axios({\n    method: 'GET',\n    url: 'https://pokeapi.co/api/v2/pokemon/',\n    headers: {\n      'Accept': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    },\n    params: {\n      limit,\n      offset: page === 1 ? 0 : page * limit,\n    }\n  });\n  \n  return {\n    next: response.data.next,\n    results: response.data.results\n  };\n};\n","import {\n  useState,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useCallback\n} from 'react'\n\ninterface Props {\n  callback: (page: number) => void\n  hasMore: boolean\n  startPage: number\n  direction: string\n  offset: number\n}\n\nconst DIRECTIONS = {\n  BOTTOM: 'bottom',\n  TOP: 'top'\n}\n\nexport const useInfiniteScroll = ({\n  callback,\n  hasMore,\n  startPage = 1,\n  offset = 250,\n  direction = DIRECTIONS.BOTTOM\n}: Props) => {\n  const ref = useRef<any>(null)\n  const [firstScroll, setFirstScroll] = useState<boolean>(false)\n  const containerRef = useRef<any>(null)\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [page, setPage] = useState<any>(startPage)\n\n  const setRef = useCallback((node?: HTMLElement) => {\n    if (node) {\n      ref.current = node\n    }\n  }, [])\n\n  const setContainerRef = useCallback((node?: HTMLElement) => {\n    if (node) {\n      containerRef.current = node\n    }\n  }, [])\n\n  const fetchData = async (page: number) => {\n    setIsLoading(true)\n    await callback(page)\n    setIsLoading(false)\n  }\n\n  useEffect(() => {\n    const func = async () => {\n      await fetchData(page)\n      if (direction === DIRECTIONS.TOP) containerRef.current.scrollTo(0, offset)\n    }\n    func()\n  }, [page])\n\n  useLayoutEffect(() => {\n    if (!hasMore) return\n\n    const currentRef = ref.current\n\n    const options = {\n      root: null,\n      rootMargin:\n        direction === DIRECTIONS.BOTTOM\n          ? `0px 0px ${offset}px 0px`\n          : `${offset}px 0px 0px 0px`\n    }\n\n    const loadMore = async (entries: any) => {\n      entries.forEach(({ isIntersecting }: any) => {\n        if (isIntersecting && !isLoading) {\n          setPage((prev: number) => prev + 1)\n        }\n      })\n    }\n\n    const observer = new IntersectionObserver(loadMore, options)\n\n    observer.observe(currentRef)\n\n    return () => {\n      observer.disconnect()\n    }\n  }, [ref, hasMore, isLoading])\n\n  useLayoutEffect(() => {\n    if (direction === DIRECTIONS.TOP && !firstScroll) {\n      containerRef.current.scrollIntoView({\n        block: 'end',\n        inline: 'nearest'\n      })\n    }\n  })\n\n  useEffect(() => {\n    window.addEventListener('scroll', () => setFirstScroll(true))\n    return () =>\n      window.removeEventListener('scroll', () => setFirstScroll(true))\n  }, [])\n\n  return [setRef, setContainerRef, isLoading]\n}\n","import React from 'react';\r\n\r\nconst Loader = React.forwardRef((props, ref) => {\r\n  return (\r\n    <div ref={ref} className=\"loader\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Loader;\r\n","import React from 'react'\n\nconst Child = ({ url, name }) => (\n  <figure\n    key={name}\n    className={`gallery__item gallery__item--${name}`}\n  >\n    <img\n      src={url}\n      className=\"gallery__img\"\n      alt=\"Image\"/>\n  </figure>\n)\n\nexport default Child;\n","import React, { useState } from 'react';\nimport { getPokemons } from './services';\nimport useInfiniteScroll from 'react-use-infinite-scroll';\nimport Spinner from 'react-svg-spinner';\nimport Loader from './Loader';\nimport Child from './Child';\nimport './styles.css';\n\nconst Demo = () => {\n  const [pokemons, setPokemons] = useState(null);\n  const [hasNextPage, setNextPage] = useState(null);\n  \n  const getImages = (page) => new Promise(async (resolve) => {\n    const { results, next } = await getPokemons(page, 100);\n    setPokemons(prev => (prev ? [...prev, ...results] : results));\n    setNextPage(!!next);\n    resolve(results);\n  });\n  \n\n  const [ref, containerRef, isLoading] = useInfiniteScroll({\n    hasMore: hasNextPage,\n    offset: 100,\n    direction: 'bottom',\n    callback: getImages,\n  });\n\n  return (\n    <div ref={containerRef}>\n      <ul className=\"gallery\">\n        {pokemons &&\n        pokemons.map((pokemon, idx) => (\n            <Child {...pokemon} key={idx}/>\n          ))}\n      </ul>\n      <Loader ref={ref}>{ isLoading && <Spinner color=\"goldenrod\" size=\"64px\" thickness={2} />}</Loader>\n    </div>\n  );\n};\n\nexport default Demo;\n","import React from 'react'\n\nimport Demo from './components/Demo';\nimport 'react-use-infinite-scroll/dist/index.css'\n\nconst App = () => {\n  return <Demo/>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}