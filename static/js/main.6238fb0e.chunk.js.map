{"version":3,"sources":["components/Demo/services.js","../../src/useInfiniteScroll.tsx","components/Demo/Loader.jsx","components/Demo/Child.jsx","components/Demo/index.jsx","App.tsx","index.tsx"],"names":["data","DELAY","ms","Promise","res","setTimeout","getResults","page","limit","next","concat","slice","results","getServerImages","a","fetch","response","json","callback","hasMore","startPage","offset","direction","ref","useRef","useState","firstScroll","setFirstScroll","containerRef","isLoading","setIsLoading","setPage","setRef","useCallback","setContainerRef","useEffect","fetchData","func","useLayoutEffect","currentRef","observer","IntersectionObserver","entries","isIntersecting","prev","root","rootMargin","block","inline","window","Loader","React","forwardRef","props","className","children","Child","url","name","thumbnailUrl","alt","visibleByDefault","effect","src","placeholderSrc","Demo","images","setImages","hasNextPage","setNextPage","useInfiniteScroll","resolve","map","image","idx","key","color","size","thickness","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6238fb0e.chunk.js","sourcesContent":["\nlet data;\n\nconst DELAY = (ms) => new Promise(res => setTimeout(res, ms));\n\nconst getResults = (page, limit) => {\n  const next = !![].concat(data).slice(page === 1 ? 0 : ((page - 1) * limit), ((page - 1) * limit) + limit)\n  const results = [].concat(data).slice(page === 1 ? 0 : ((page - 1) * limit), ((page - 1) * limit) + limit)\n  return {\n    next, results\n  }\n}\n\nexport const getServerImages = async (page, limit) => {\n  if (!data) {\n    const response = await fetch('https://jsonplaceholder.typicode.com/photos');\n    data = await response.json();\n    \n    return getResults(page, limit);\n  } else {\n    \n    await DELAY(2000);\n    return getResults(page, limit);\n  }\n};\n","import {\n  useState,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useCallback\n} from 'react'\n\ninterface Props {\n  callback: (page: number) => void\n  hasMore: boolean\n  startPage: number\n  direction?: 'bottom' | 'top'\n  offset: number\n}\n\nexport const useInfiniteScroll = ({\n  callback,\n  hasMore,\n  startPage = 1,\n  offset = 250,\n  direction\n}: Props) => {\n  const ref = useRef<any>(null)\n  const [firstScroll, setFirstScroll] = useState<boolean>(false)\n  const containerRef = useRef<any>(null)\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [page, setPage] = useState<any>(startPage)\n\n  const setRef = useCallback((node?: HTMLElement) => {\n    if (node) {\n      ref.current = node\n    }\n  }, [])\n\n  const setContainerRef = useCallback((node?: HTMLElement) => {\n    if (node) {\n      containerRef.current = node\n    }\n  }, [])\n\n  const fetchData = async (page: number) => {\n    setIsLoading(true)\n    await callback(page)\n    setIsLoading(false)\n  }\n\n  useEffect(() => {\n    const func = async () => {\n      await fetchData(page)\n      if (direction === 'top') containerRef.current.scrollTo(0, offset)\n    }\n    func()\n  }, [page])\n\n  useLayoutEffect(() => {\n    if (!hasMore) return\n\n    const currentRef = ref.current\n\n    const options = {\n      root: null,\n      rootMargin:\n        direction === 'bottom'\n          ? `0px 0px ${offset}px 0px`\n          : `${offset}px 0px 0px 0px`\n    }\n\n    const loadMore = async (entries: any) => {\n      entries.forEach(({ isIntersecting }: any) => {\n        if (isIntersecting && !isLoading) {\n          setPage((prev: number) => prev + 1)\n        }\n      })\n    }\n\n    const observer = new IntersectionObserver(loadMore, options)\n\n    observer.observe(currentRef)\n\n    return () => {\n      observer.disconnect()\n    }\n  }, [ref, hasMore, isLoading])\n\n  useLayoutEffect(() => {\n    if (direction === 'top' && !firstScroll) {\n      containerRef.current.scrollIntoView({\n        block: 'end',\n        inline: 'nearest'\n      })\n    }\n  })\n\n  useEffect(() => {\n    window.addEventListener('scroll', () => setFirstScroll(true))\n    return () =>\n      window.removeEventListener('scroll', () => setFirstScroll(true))\n  }, [])\n\n  return [setRef, setContainerRef, isLoading]\n}\n","import React from 'react';\r\n\r\nconst Loader = React.forwardRef((props, ref) => {\r\n  return (\r\n    <div ref={ref} className=\"loader\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Loader;\r\n","import React from 'react'\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\nconst Child = ({ url, name, thumbnailUrl }) => (\n  <div className={`gallery__item gallery__item--${name}`}>\n    <LazyLoadImage\n      alt=\"img\"\n      visibleByDefault\n      effect='blur'\n      className=\"gallery__img\"\n      src={url}\n      placeholderSrc={thumbnailUrl}\n    />\n  </div>\n)\n\nexport default Child;\n","import React, { useState } from 'react';\nimport { getServerImages } from './services';\nimport useInfiniteScroll from 'react-use-infinite-scroll';\nimport Spinner from 'react-svg-spinner';\nimport Loader from './Loader';\nimport Child from './Child';\nimport './styles.css';\n\nconst Demo = () => {\n  const [images, setImages] = useState([]);\n  const [hasNextPage, setNextPage] = useState(null);\n  \n  const getImages = (page) => new Promise(async (resolve) => {\n    const { results, next } = await getServerImages(page, 100);\n    setImages(prev => (prev ? [...prev, ...results] : results));\n    setNextPage(next);\n    resolve(results);\n  });\n  \n\n  const [ref, containerRef, isLoading] = useInfiniteScroll({\n    hasMore: hasNextPage,\n    offset: 100,\n    direction: 'bottom',\n    callback: getImages,\n  });\n\n  return (\n    <div ref={containerRef}>\n      <ul className=\"gallery\">\n        { images.map((image, idx) => (\n            <Child {...image} key={idx}/>\n          ))}\n      </ul>\n      <Loader ref={ref}>{ isLoading && <Spinner color=\"goldenrod\" size=\"64px\" thickness={2} />}</Loader>\n    </div>\n  );\n};\n\nexport default Demo;\n","import React from 'react'\n\nimport Demo from './components/Demo';\nimport 'react-use-infinite-scroll/dist/index.css'\n\nconst App = () => {\n  return <Demo/>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}